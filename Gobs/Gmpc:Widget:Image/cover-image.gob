requires 2.0.0

%headertop{
#include <gtk/gtk.h>
#include <libmpd/libmpd.h>
#include "main.h"
%}


class Gmpc:MetaImage from Gtk:Event:Box{
	public int size = {64};
	private gulong status_signal = {0};
	private int type = {META_ALBUM_ART};
	property INT size
		(nick = _("Size"),
		blurb = _("Size of the image"),
		default_value = 64,
		export,
		link);
	
	private GtkWidget *image = { gtk_image_new()} 
		destroywith gtk_widget_destroy;
	init (self)
	{
		/** Set size */
		gtk_widget_set_size_request(self, self->size, self->size);
		gtk_container_add(GTK_CONTAINER(self), self->_priv->image);		
		self_set_cover_na(self);
		gtk_widget_show(self);
		self->_priv->status_signal = g_signal_connect_swapped(G_OBJECT(gmpcconn), "status_changed",
				self_update_cover, self);
	}

	override (G:Object)
	void 
	finalize (self)
	{
		printf("Finalizing metaimage\n");
		if(self->_priv->status_signal)
		{
			g_signal_handler_disconnect(G_OBJECT(gmpcconn), self->_priv->status_signal);
		}

	}
		
	public 
	GtkWidget * new (int type)
	{
		Self *gmi =  GET_NEW;
		gmi->_priv->type = type;
		return (GtkWidget *)gmi;
	}
	
	private	
	void
	update_cover(self, MpdObj *mi, ChangedStatusType what, GmpcConnection *gmpcconn )
	{
		if(what&(MPD_CST_SONGID|MPD_CST_SONGPOS))
		{
			mpd_Song *song = mpd_playlist_get_current_song(mi);
			if(!song)
			{
				self_set_cover_na(self);
			}
			else
			{
				meta_data_get_path_callback(song, self->_priv->type, self_meta_callback, self);
			}
		}

	}
	private
	void
	meta_callback(mpd_Song *song, MetaDataResult ret, char *path,Gmpc:MetaImage *self)
	{
		mpd_Song *current = mpd_playlist_get_current_song(connection);
		if(!current)
			return;
		if(!strcmp(song->file, current->file))
		{
			if(ret == META_DATA_AVAILABLE)
			{
				self_set_cover_from_path(self,path); 
			}
			else if (ret == META_DATA_FETCHING)
			{
				self_set_cover_fetching(self);
			}
			else
			{
				self_set_cover_na(self);
			}
		}

	}


	public 
	void
	set_cover_na(self)
	{
		gtk_image_set_from_stock(self->_priv->image, "media-no-cover", -1);
	}
	public 
	void
	set_cover_fetching(self)
	{
		gtk_image_set_from_stock(self->_priv->image, "media-loading-cover", -1);
	}
	public 
	void
	set_cover_from_path(self, gchar *path)
	{
		GdkPixbuf *pb = NULL;
		pb = gdk_pixbuf_new_from_file_at_size(path,self->size,self->size,NULL);
		if(pb)
		{
			draw_pixbuf_border(pb);
			gtk_image_set_from_pixbuf(GTK_IMAGE(self->_priv->image),pb);
			g_object_unref(pb);
		}
	}










}
