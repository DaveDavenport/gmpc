/* Gnome Music Player Client (GMPC)
 * Copyright (C) 2004-2009 Qball Cow <qball@sarine.nl>
 * Project homepage: http://gmpcwiki.sarine.nl/
 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

/**
 * This gob file provides a hack, so rows in a gtk_list_store can be moved, (with gtk_tree_reorderable enabled)
 * While the gtk_tree_row_reference stays in tracked.
 */
requires 2.0.0

%ht{
#include <gtk/gtk.h>
#include <libmpd/libmpd.h>
#include <libmpd/libmpd-internal.h>
#include "gmpc-mpddata-model.h"
#include "gmpc-mpddata-model-private.h"
%}




class Gmpc:ListStore:Sort from Gtk:List:Store
		(interface Gtk:Tree:Drag:Source)
		(interface Gtk:Tree:Drag:Dest)
{

		interface Gtk:Tree:Drag:Source
		private 
		gboolean row_draggable (Gtk:Tree:Drag:Source *drag_source, Gtk:Tree:Path *path)
		{
            return TRUE;
		}

		interface Gtk:Tree:Drag:Source
			private 
		gboolean drag_data_get (Gtk:Tree:Drag:Source *drag_source, Gtk:Tree:Path *path, Gtk:Selection:Data *selection_data)
		{
			return FALSE;
		}
		interface Gtk:Tree:Drag:Source
			private 
		gboolean drag_data_delete (Gtk:Tree:Drag:Source *drag_source, Gtk:Tree:Path *path) 
		{
			return TRUE;
		}

		interface Gtk:Tree:Drag:Dest
		private gboolean drag_data_received 
				(Gtk:Tree:Drag:Dest *drag_dest, 
				 Gtk:Tree:Path *dest,
				 Gtk:Selection:Data *selection_data) 
		{
			GtkTreePath *path=NULL;
			GtkTreeModel *model=NULL;
		    GtkTreeIter desti, sourcei;	
            gboolean dest_v;
			if(dest == NULL || !gtk_tree_get_row_drag_data(selection_data, &model, &path))
			{
				return FALSE;
			}
            dest_v= gtk_tree_model_get_iter(GTK_TREE_MODEL(model), &desti, dest);
			if(gtk_tree_model_get_iter(GTK_TREE_MODEL(model), &sourcei, path))
			{
                if(dest_v)
                    gtk_list_store_move_before(GTK_LIST_STORE(model), &sourcei, &desti);
                else
                    gtk_list_store_move_before(GTK_LIST_STORE(model), &sourcei, NULL);

			}
			gtk_tree_path_free(path);
			return TRUE;
		}

		interface Gtk:Tree:Drag:Dest
		private gboolean row_drop_possible 
					(Gtk:Tree:Drag:Dest *drag_dest,
					 Gtk:Tree:Path 		*dest,
					 Gtk:Selection:Data *selection_data)
		{
			return TRUE;
		}

		public
		Gmpc:ListStore:Sort *new (gint n_columns, ...)
        {
            Self *self = GET_NEW;
            va_list args;
            gint i;
            GType types[n_columns];

            g_return_val_if_fail (n_columns > 0, NULL);

            va_start (args, n_columns);
            for (i = 0; i < n_columns; i++){
                GType type = va_arg (args, GType);
                types[i] = type;
            }
            va_end (args);
            gtk_list_store_set_column_types(GTK_LIST_STORE(self), n_columns, types);

            return self;
        }
}
