requires 2.0.0
%ht{
#include <gtk/gtk.h>
#include <libmpd/libmpd.h>
#include <libmpd/debug_printf.h>
#include "metadata.h"

%}


class Gmpc:Meta:Watcher from  G:Object {
    public  int total_requested= 0;
    public int queued_requests = 0;
    init(self)
    {

    }
    public
    int
    get_total_requested(self)
    {
        return self->total_requested;
    }
    public
    int
    get_queued_requests(self)
    {
        return self->queued_requests;
    }

    public
    GmpcMetaWatcher * new (void)
    {
      return GET_NEW;
    }
    signal last NONE (INT,INT)
    void
    queue_size_changed(self, int queued_items,int total_items)
    {
        debug_printf(DEBUG_INFO, "%i:%i\n", queued_items, total_items);
        self->total_requested =total_items;
        self->queued_requests = queued_items;
    }

    signal last NONE (POINTER, INT, INT, STRING)
    void
    data_changed(self, mpd_Song *song, MetaDataType type,MetaDataResult result, gchar *path)
    { 

    }

    public
    gboolean
    match_data(MetaDataType type, mpd_Song *song1, mpd_Song *song2)
	{
		if(song1 == NULL || song2 == NULL)
			return FALSE;
		switch(type)
		{
			case META_SONG_TXT:
				if(song1->file && song2->file && !strcmp(song1->file, song2->file))
					return TRUE;
				return FALSE;
			case META_ALBUM_TXT:
			case META_ALBUM_ART:
				if(song1->album == NULL || song2->album == NULL || strcmp(song1->album, song2->album))
				{
					return FALSE;
				}
			case META_ARTIST_SIMILAR:
			case META_ARTIST_TXT:
			case META_ARTIST_ART: 
				if(song1->artist && song2->artist  && !strcmp(song1->artist, song2->artist))
				{

					return TRUE;
				}
				break;
			default:
				break;
		}
		return FALSE;
	}

	public
	void	
	get_meta_path_callback(self, mpd_Song *song, MetaDataType type,  MetaDataCallback callback, gpointer data)
	{
		gchar *path = NULL;
		MetaDataResult ret;

		if(!self_match_data(type&META_QUERY_DATA_TYPES, song,song))
		{
			callback(song, META_DATA_UNAVAILABLE, NULL, data);			
		}
		ret = meta_data_get_path(song, type, &path,callback,data);
		callback(song,ret,path,data);
		if(path) g_free(path);
	}

	public 
	MetaDataResult
	get_meta_path(self, mpd_Song *song, MetaDataType type, gchar **path)
	{
		g_assert(path != NULL);
			
		if(!self_match_data(type&META_QUERY_DATA_TYPES, song,song))
		{
			return META_DATA_UNAVAILABLE;
		}

		return meta_data_get_path(song, type, path,NULL,NULL);
	}
}
