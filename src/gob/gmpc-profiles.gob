/* Gnome Music Player Client (GMPC)
 * Copyright (C) 2004-2009 Qball Cow <qball@sarine.nl>
 * Project homepage: http://gmpcwiki.sarine.nl/
 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

requires 2.0.0
%ht{
#include <stdio.h>
#include <stdlib.h>
#include <libmpd/libmpd.h>
#include <libmpd/debug_printf.h>
#include "config1.h"
%}
%privateheader{
    #include "main.h"
	#include "plugin.h"
    #include "playlist3-messages.h"
%}
%h{
  enum {
	PROFILE_ADDED,
	PROFILE_REMOVED,
	PROFILE_COL_CHANGED
	};
  enum {
    PROFILE_COL_NAME,
    PROFILE_COL_HOSTNAME,
    PROFILE_COL_PORT,
    PROFILE_COL_DO_AUTH,
    PROFILE_COL_PASSWORD,
    PROFILE_NUM_COLS
  };

  typedef struct {
    gchar     *id;
    gchar     *name;
    gchar     *hostname;
    int       port;
    gboolean  do_auth;
    gchar     *password;
  }Profile;

%}

class Gmpc:Profiles from G:Object
{
  private config_obj *profiles = {NULL}; 
  private Profile **list = {NULL};
  private int num_profiles = {0};

  /* signal with (self, id) */
  signal last NONE (INT, INT,STRING)
  void
  changed(self,const int changed, const int col, const char * id)
  {
	if(changed == PROFILE_ADDED)
    {
        gchar *message = g_markup_printf_escaped("<b>%s:</b> '%s'", _("Added profile"),self_get_name(self,id));
        playlist3_show_error_message(message, ERROR_INFO);
        q_free(message);

        debug_printf(DEBUG_INFO,"Item %s added\n", id);
    }
    else if(changed == PROFILE_REMOVED)
    {
        gchar *message = g_markup_printf_escaped("<b>%s:</b> '%s'", _("Removed profile"),self_get_name(self,id));
        playlist3_show_error_message(message, ERROR_INFO);
        q_free(message);
		debug_printf(DEBUG_INFO,"Item %s removed\n", id);
    }
	else if(changed == PROFILE_COL_CHANGED)
	{
        /* Disabled because of grand spamming charges */
    /*    
        gchar *message = g_markup_printf_escaped("<b>%s:</b> '%s'", _("Changed profile"),self_get_name(self,id));
        playlist3_show_error_message(message, ERROR_INFO);
        q_free(message);
        */
        debug_printf(DEBUG_INFO,"Item %s changed col: %i\n", id, col);
    }
  }


  /**
   * New
   */
  public 
  GmpcProfiles *
  new(void)
  {
    return (GmpcProfiles *)GET_NEW;
  }


  /** 
   * init 
   * */
  init(self)
  {
    /**
     * Get Profile
     */
    gchar *url = cfg_get_single_value_as_string(config, "connection", "profile-file");
    if(!url)
    {
	  url = gmpc_get_user_path("profiles.cfg");
      cfg_set_single_value_as_string(config, "connection", "profile-file",url);
    }
    self->_priv->profiles = cfg_open(url);
    if(self->_priv->profiles == NULL)
    {
      /**
       * Show gtk error message and quit 
       */
      debug_printf(DEBUG_ERROR,"Failed to save/load Profile file:\n%s\n",url);
      abort();
    }
    g_free(url);
    self_load_from_config(self);
    if(self->_priv->num_profiles == 0)
    {
      self_add_default(self);
      self_load_from_config(self);
    }
  }
  /**
   * Add default values
   */
  private 
  void
  add_default(self)
  {
    cfg_set_single_value_as_string(config, "connection", "currentprofile", "Default"); 
    cfg_set_single_value_as_string(self->_priv->profiles, "Default", "hostname", "localhost");
    cfg_set_single_value_as_string(self->_priv->profiles, "Default", "name", "Default");
    cfg_set_single_value_as_string(self->_priv->profiles, "Default", "password","");
    cfg_set_single_value_as_int(self->_priv->profiles, "Default", "portnumber",6600);
    cfg_set_single_value_as_int(self->_priv->profiles, "Default", "useauth",FALSE);
  }

  /*********
   * PROFILE
   */
  /* free a profile */
  public 
  void
  free_profile(Profile *profile)
  {
    if(profile->name)
      g_free(profile->name);
    if(profile->id)
      g_free(profile->id);
    if(profile->hostname)
      g_free(profile->hostname);
    if(profile->password)
      g_free(profile->password); 
    g_free(profile);
  }

  public 
  Profile * 
  new_profile(void)
  {
    Profile *retv = g_malloc0(sizeof(*retv));
    /* Init values */
    retv->name      = NULL;
    retv->id        = NULL;
    retv->password  = NULL;
    retv->hostname  = NULL;
    retv->port      = 6600;
    retv->do_auth   = FALSE; 

    return retv;
  }

  private 
  void
  load_from_config(self)
  {
    conf_mult_obj *iter,*mult = cfg_get_class_list(self->_priv->profiles);
    /* free the old list */
    for(iter = mult;iter;iter = iter->next)
    {
      Profile *prof = self_new_profile();

      self->_priv->num_profiles++;
      self->_priv->list = g_realloc(self->_priv->list, (self->_priv->num_profiles+1)*sizeof(Profile *)); 
      self->_priv->list[self->_priv->num_profiles] = NULL;
      self->_priv->list[self->_priv->num_profiles-1] = prof;

      prof->id = g_strdup(iter->key);
      prof->name = cfg_get_single_value_as_string(self->_priv->profiles, prof->id, "name");
      prof->hostname = cfg_get_single_value_as_string(self->_priv->profiles, prof->id, "hostname");
      prof->password = cfg_get_single_value_as_string(self->_priv->profiles, prof->id, "password");
      prof->port = cfg_get_single_value_as_int(self->_priv->profiles, prof->id, "portnumber");
      prof->do_auth = cfg_get_single_value_as_int(self->_priv->profiles, prof->id, "useauth");
    }
    cfg_free_multiple(mult);
  }

  /**
   * get profile
   */
  private
  Profile *
  get_profile(self , const gchar *id(check null))
  {
    int i = 0;
    if(self->_priv->list)
    {
      for(i=0;self->_priv->list[i]; i++)
      {
        if(!strcmp(self->_priv->list[i]->id, id))
          return self->_priv->list[i];
      }
    } 
    return NULL;
  }

  /**
   * get hostname 
   */
  public 
  gchar *
  get_hostname(self,const gchar *id (check null))
  {
    Profile *prof = self_get_profile(self, id);
    if(!prof)
      return NULL;
    return prof->hostname;
  }
  /**
   * get name  
   */
  public 
  const gchar *                                 
  get_name(self, const gchar *id (check null))
  {
    Profile *prof = self_get_profile(self, id);
    if(!prof)
      return NULL;
    return prof->name;
  }
  /**
   * get id 
   */
  public 
  const gchar *                                 
  get_id(self, const gchar *id (check null))
  {
    Profile *prof = self_get_profile(self, id);
    if(!prof)
      return NULL;
    return prof->id;
  }
  /**
   * get password 
   */
  public 
  gchar *                                 
  get_password(self, const gchar *id (check null))
  {
    Profile *prof = self_get_profile(self, id);
    if(!prof)
      return NULL;
    return prof->password;
  }

  /**
   * get port 
   */
  public 
  int                     
  get_port(self, const gchar *id (check null))
  {
    Profile *prof = self_get_profile(self, id);
    if(!prof)
      return -1;
    return prof->port;
  }

  /**
   * get do_auth 
   */
  public 
  gboolean 
  get_do_auth(self, const gchar *id (check null))
  {
    Profile *prof = self_get_profile(self, id);
    if(!prof)
      return FALSE;
    return prof->do_auth;
  }

  /**
   * Create new item
   */
  public 
  gchar *
  create_new_item(self, const gchar *id)
  {
        return self_create_new_item_with_name(self, id, "New Profile");
  }
  public 
  gchar*
  create_new_item_with_name(self, const gchar *id, const gchar *name)
  {
    Profile *prof = g_malloc0(sizeof(*prof));
    if(!id)
      prof->id = g_strdup_printf("%u",g_random_int());
    else
      prof->id = g_strdup(id);
    if(!name)
        prof->name = g_strdup("New Profile");
    else
        prof->name = g_strdup(name);
    prof->hostname = g_strdup("localhost");
    prof->password= g_strdup("");
    prof->port = 6600;
    prof->do_auth = 0;
   
	/* safe this to the config file */ 
    cfg_set_single_value_as_string(self->_priv->profiles, prof->id, "name", prof->name);
    cfg_set_single_value_as_string(self->_priv->profiles, prof->id, "hostname", prof->hostname);
    cfg_set_single_value_as_string(self->_priv->profiles, prof->id, "password", prof->password);
    cfg_set_single_value_as_int(self->_priv->profiles, prof->id, "portnumber", prof->port);
    cfg_set_single_value_as_int(self->_priv->profiles, prof->id, "useauth", prof->do_auth);

    self->_priv->num_profiles++;
    self->_priv->list = g_realloc(self->_priv->list, (self->_priv->num_profiles+1)*sizeof(Profile *));     
    self->_priv->list[self->_priv->num_profiles] = NULL;
    self->_priv->list[self->_priv->num_profiles-1] = prof;
    /* propagate */
    self_changed(self,PROFILE_ADDED,-1, prof->id);
    return prof->id;
  }
  public
  void
  remove_item(self, const gchar *id)
  {
    int i=0;
    Profile *prof =  self_get_profile(self, id);
    if(!prof)
    {
        debug_printf(DEBUG_WARNING, "Trying to remove not-existing profile: %i\n", id);
      return;
    }
    self_changed(self,PROFILE_REMOVED,-1, id);
    for(i=0; self->_priv->list[i] && self->_priv->list[i] != prof;i++);
    if(self->_priv->list[i] == prof)
    {
      for(; self->_priv->list[i] ;i++)
      {
        self->_priv->list[i] = self->_priv->list[i+1];
      }
      self->_priv->num_profiles--;
      self->_priv->list = g_realloc(self->_priv->list, (self->_priv->num_profiles+1)*sizeof(Profile *));     
      
      cfg_remove_class(self->_priv->profiles, (char *)id);
      self_free_profile(prof);
    }

  }

  /**
   * GET CURRENT
   */
  public
  gchar *
  get_current(self)
  {
		gchar *id = cfg_get_single_value_as_string_with_default(config, "connection", "currentprofile", "Default");
		Profile *prof = self_get_profile(self, id);
		/* if not available get the first one */
		if(!prof)
		{
			g_free(id);
            if(self->_priv->list != NULL && self->_priv->list[0])
            {
			    self_set_current(self, self->_priv->list[0]->id);
            } else {
                self_add_default(self);    
                self_load_from_config(self);
                self_changed(self, PROFILE_ADDED, -1,"Default");
            }
			id = cfg_get_single_value_as_string_with_default(config, "connection", "currentprofile", "Default");
		}
		return id; 
  }

  signal last NONE (STRING) 
  void
  set_current(self, const gchar *id(check null))
  {
    Profile *prof = self_get_profile(self, id);
    if(prof)
      cfg_set_single_value_as_string(config, "connection", "currentprofile", (char *)id);
  }
  public
  GList *
  get_profiles_ids(self)
  {
    GList *list = NULL;
    int i=0;
    for(i=0; self->_priv->list[i] ; i++)
    {
      list = g_list_append(list,g_strdup(self->_priv->list[i]->id));
    }
    return list;
  }

  /**
   * set field
   */
  public
  void
  set_name(self, const gchar *id (check null), const gchar *value (check null))
  {
    Profile *prof = self_get_profile(self, id);

    if(!prof)
      return ;                              
	
    if((value && prof->name &&  g_utf8_collate(value, prof->name) == 0)|| (value == NULL && prof->name == NULL))
	return;

    if(prof->name)
      g_free(prof->name);

    prof->name = g_strdup(value);
    cfg_set_single_value_as_string(self->_priv->profiles, (char *)id, "name",prof->name);
    self_changed(self,PROFILE_COL_CHANGED, PROFILE_COL_NAME,id);
  }

  public
  void
  set_hostname(self, const gchar *id (check null), const gchar *value (check null))
  {
    Profile *prof = self_get_profile(self, id);
    if(!prof)
      return ;                              

    if((value && prof->hostname &&  g_utf8_collate(value, prof->hostname) == 0)|| (value == NULL && prof->hostname == NULL))
	return;

    if(prof->hostname)
      g_free(prof->hostname);
    prof->hostname = g_strdup(value);
    cfg_set_single_value_as_string(self->_priv->profiles, (char *)id, "hostname",prof->hostname);
    self_changed(self,PROFILE_COL_CHANGED, PROFILE_COL_HOSTNAME,id);
  }
	/**
	 * Set Password
	 */
  public
  void
  set_password(self,const gchar *id (check null), gchar *value)
  {
    Profile *prof = self_get_profile(self, id);
    if(!prof)
      return ;                              

    if((value && prof->password &&  g_utf8_collate(value, prof->password) == 0)|| (value == NULL && prof->password == NULL))
	return;

    if(prof->password)
      g_free(prof->password);
    if(value)
      prof->password = g_strdup(value);
    else
      prof->password = g_strdup("");
    cfg_set_single_value_as_string(self->_priv->profiles, (char *)id, "password",prof->password);
    self_changed(self,PROFILE_COL_CHANGED, PROFILE_COL_PASSWORD,id);
  }

	/**
	 * Set Port
	 */
  public
  void
  set_port(self, const gchar *id (check null), int value)
  {
    Profile *prof = self_get_profile(self, id);
    if(!prof)
      return ;                              
    if(value == prof->port)
	    return;
    prof->port = value;
    cfg_set_single_value_as_int(self->_priv->profiles, (char *)id, "portnumber",prof->port);
    self_changed(self,PROFILE_COL_CHANGED, PROFILE_COL_PORT,id);
  }
	/**
	 * Set do auth
	 */
  public
  void
  set_do_auth(self,const gchar *id (check null), int value)
  {
    Profile *prof = self_get_profile(self, id);
    if(!prof)
      return ;                              
    if(prof->do_auth == value)
	    return;
    prof->do_auth = value;
    cfg_set_single_value_as_int(self->_priv->profiles,(char *)id, "useauth",prof->do_auth);
    self_changed(self,PROFILE_COL_CHANGED, PROFILE_COL_DO_AUTH,id);
  }
	/**
   * Has profile with id
   */
	public
	gboolean	
	has_profile(self, const gchar *id (check null))
	{
		Profile *prof = self_get_profile(self, id);
		if(!prof)
			return FALSE;
		else 
			return TRUE;                                 	

	}
	override (G:Object)
	void
	finalize (G:Object *obj)
	{
		Self *self = GMPC_PROFILES(obj);
		if(self->_priv->list)
		{
			int i = 0;
			do{
				Profile * prof = self->_priv->list[i];
				self_free_profile(prof);
				self->_priv->list[i] = NULL;
				i++;
			}while(self->_priv->list[i]);
			g_free(self->_priv->list);
			self->_priv->list = NULL;
		}
		if(self->_priv->profiles)
		{
			cfg_close(self->_priv->profiles);
			self->_priv->profiles=  NULL;
		}
		PARENT_HANDLER(obj);
	}
}
