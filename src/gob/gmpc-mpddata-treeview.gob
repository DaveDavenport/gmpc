requires 2.0.0

%ht{
#include <gtk/gtk.h>
%}
%privateheader{
#include "main.h"
#include "config.h"
#include "gmpc-mpddata-model.h"
#include "eggcolumnchooserdialog.h"
#include "gmpc-mpddata-model-playlist.h"
%}
%h{
#define NUM_COLS 15
%}

%{
static int col_ids[NUM_COLS] = {
    MPDDATA_MODEL_COL_MARKUP,
    MPDDATA_MODEL_COL_SONG_ARTIST,			      /* album name */
    MPDDATA_MODEL_COL_SONG_ALBUM,			      /* album name */
    MPDDATA_MODEL_COL_SONG_TITLE,			      /* song title */
    MPDDATA_MODEL_COL_SONG_TITLEFILE,		    /* song title */
    MPDDATA_MODEL_COL_SONG_GENRE,			      /* song genre */
    MPDDATA_MODEL_COL_SONG_TRACK,			      /* song track */
    MPDDATA_MODEL_COL_SONG_NAME,			      /* stream name */
    MPDDATA_MODEL_COL_SONG_COMPOSER,		    /* composer name */
    MPDDATA_MODEL_COL_SONG_PERFORMER,		    /* performer */
    MPDDATA_MODEL_COL_SONG_DATE,			      /* date */
    MPDDATA_MODEL_COL_SONG_LENGTH_FORMAT,	  /* length formatted */
    MPDDATA_MODEL_COL_SONG_DISC,			      /* disc */
    MPDDATA_MODEL_COL_SONG_COMMENT,			    /* comment */
    MPDDATA_MODEL_COL_ICON_ID,				      /* icon id */
};
static gchar *col_names[NUM_COLS] = {
    N_("Markup"),
    N_("Artist"),
    N_("Album"),
    N_("Title"),
    N_("File"),
    N_("Genre"),
    N_("Track"),
    N_("Name"),
    N_("Composer"),
    N_("Performer"),
    N_("Date"),
    N_("Duration"),
    N_("Disc"),
    N_("Comment"),
    N_("Icon Id")
}; 

static gint  col_enabled[NUM_COLS] = {
    FALSE,//"Markup",
    TRUE, //"Artist",
    TRUE,//"Album",
    TRUE,//"Title",
    FALSE,//"File",
    FALSE,//"Genre",
    FALSE,//"Track",
    FALSE,//"Name",
    FALSE,//"Composer",
    FALSE,//"Performer",
    FALSE,//"Date",
    FALSE,//"Duration",
    FALSE,//"Disc",
    FALSE,//"Comment",
    TRUE//"Icon Id"
};
static gint  col_position[NUM_COLS] = {
    14,//"Markup",
    3, //"Artist",
    2,//"Album",
    1,//"Title",
    4,//"File",
    5,//"Genre",
    6,//"Track",
    7,//"Name",
    8,//"Composer",
    9,//"Performer",
    10,//"Date",
    11,//"Duration",
    12,//"Disc",
    13,//"Comment",
    0//"Icon Id"
};
%}

class Gmpc:MpdData:Treeview from Gtk:Tree:View {
    private gchar *name = {NULL} destroywith g_free;
    private gboolean do_sort = {TRUE};
    private GtkTreeViewColumn *columns[NUM_COLS];

    public 
        GtkWidget * new (char *name (check null), gboolean sort, Gtk:Tree:Model *model (check type null))
        {
            Self *self = GET_NEW;
            self->_priv->name = g_strdup(name);
            self->_priv->do_sort = sort;
            gtk_tree_view_set_model(GTK_TREE_VIEW(self), model);
            /* init the tree */
            self_do_init(self);
            return (GtkWidget *)self;
        }
    private
        void do_init (self)
        {
            int i=0;
            gchar *conf_size,*conf_opt = g_strdup_printf("%s-colpos", self->_priv->name);
            GtkTreeViewColumn *col = NULL;
            for(i = 0;i< NUM_COLS;i++)
            { 
                int conf_pos = cfg_get_single_value_as_int_with_default(config, conf_opt,col_names[i], col_position[i]); 
                col = self_add_column(self,_(col_names[i]),col_ids[i],conf_pos);
                g_object_set_data(G_OBJECT(col), "id",GINT_TO_POINTER(i));	
            }
            q_free(conf_opt);
            conf_opt = g_strdup_printf("%s-colshow", self->_priv->name);
            conf_size = g_strdup_printf("%s-colsize", self->_priv->name);
            for(i = 0;i< NUM_COLS;i++)
            { 
                int id = GPOINTER_TO_INT(g_object_get_data(G_OBJECT(self->_priv->columns[i]), "id"));
                int col_size= cfg_get_single_value_as_int_with_default(config, conf_size,col_names[id], 200); 
                int col_show= cfg_get_single_value_as_int_with_default(config, conf_opt,col_names[id], col_enabled[id]); 
                gtk_tree_view_column_set_visible(self->_priv->columns[i],col_show);
                gtk_tree_view_append_column(GTK_TREE_VIEW(self), self->_priv->columns[i]);
                /* don't set the icon column */
                if(col_ids[id]!= MPDDATA_MODEL_COL_ICON_ID)
                    gtk_tree_view_column_set_fixed_width(self->_priv->columns[i], col_size);
            }
            /* set the last column small, to stop weird grows */
            for(i=NUM_COLS-1; i>=0 && !gtk_tree_view_column_get_visible(self->_priv->columns[i]);i--);
            gtk_tree_view_column_set_fixed_width(self->_priv->columns[i], 150);

            q_free(conf_opt);
            q_free(conf_size);

            /* */
            gtk_tree_selection_set_mode(gtk_tree_view_get_selection(GTK_TREE_VIEW(self)), GTK_SELECTION_MULTIPLE);
            gtk_tree_view_set_fixed_height_mode(GTK_TREE_VIEW(self), TRUE);
            gtk_tree_view_set_rules_hint(GTK_TREE_VIEW(self), TRUE);

            if(self->_priv->do_sort)
            {
                int sort_col = cfg_get_single_value_as_int_with_default(config, self->_priv->name, "sort-column",MPDDATA_MODEL_COL_SONG_TITLE);
                int sort_order = cfg_get_single_value_as_int_with_default(config, self->_priv->name, "sort-order", GTK_SORT_ASCENDING);
                if(((sort_col < MPDDATA_MODEL_N_COLUMNS && sort_col >= 0) || sort_col != GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID )&& (sort_order == GTK_SORT_ASCENDING || sort_order == GTK_SORT_DESCENDING)) {
                    gtk_tree_sortable_set_sort_column_id(GTK_TREE_SORTABLE(gtk_tree_view_get_model(GTK_TREE_VIEW(self))),sort_col, sort_order); 
                }
            }
        }

    /**
     * Save Column Setup
     */
    private	
        void 
        save_column_setup (self)
        {
            int i=0;
            GList *iter,*cols = gtk_tree_view_get_columns(GTK_TREE_VIEW(self));
            gchar *conf_pos = NULL;
            gchar *conf_show = NULL;
            gchar *conf_size = NULL;

            i = g_list_length(cols);

            if(i != NUM_COLS)
            {
                g_list_free(cols);
                return;
            }
            conf_pos = g_strdup_printf("%s-colpos", self->_priv->name);
            conf_show = g_strdup_printf("%s-colshow", self->_priv->name);
            conf_size = g_strdup_printf("%s-colsize", self->_priv->name);
            i=0;
            for(iter = cols; iter; iter = g_list_next(iter))
            {
                GtkTreeViewColumn *column = iter->data;
                int id = GPOINTER_TO_INT(g_object_get_data(G_OBJECT(column), "id"));
                cfg_set_single_value_as_int(config, conf_pos, col_names[id], i);
                cfg_set_single_value_as_int(config, conf_show, col_names[id], gtk_tree_view_column_get_visible(column));
                /* only save width on > 0 columns */
                if(gtk_tree_view_column_get_width(column) > 0)
                    cfg_set_single_value_as_int(config, conf_size, col_names[id], gtk_tree_view_column_get_width(column));
                i++;
            }
            q_free(conf_pos);
            q_free(conf_show);
            q_free(conf_size);
            g_list_free(cols);

            if(self->_priv->do_sort)
            {
                int sort_col;
                GtkSortType sort_order;
                gtk_tree_sortable_get_sort_column_id(GTK_TREE_SORTABLE(gtk_tree_view_get_model(GTK_TREE_VIEW(self))), &sort_col, &sort_order); 
                cfg_set_single_value_as_int(config, self->_priv->name, "sort-column",sort_col);
                cfg_set_single_value_as_int(config, self->_priv->name, "sort-order", sort_order);
            }
        }

    override (G:Object)
        void 
        dispose (G:Object *obj)
        {
            Self *self = GMPC_MPDDATA_TREEVIEW(obj);
            self_save_column_setup(self);
            PARENT_HANDLER(obj);
        }
    private
    void
    highlight_row (GtkTreeViewColumn *tree_column,
                                                         GtkCellRenderer *cell,
                                                         GtkTreeModel *tree_model,
                                                         GtkTreeIter *iter,
                                                         gpointer data)
    {
        
        if(GMPC_IS_MPDDATA_MODEL_PLAYLIST(tree_model) && gmpc_mpddata_model_playlist_is_current_song(tree_model, iter))
            g_object_set(G_OBJECT(cell), "weight", 800,NULL);
        else
            g_object_set(G_OBJECT(cell), "weight", 400,NULL);

    }

    private
        GtkTreeViewColumn * 
        add_column(self, char *columnname, int valuerow, int position)
        {
            GtkCellRenderer *renderer;
            GtkTreeViewColumn *column = NULL;
            GValue value = {0,};

            if(valuerow == MPDDATA_MODEL_COL_ICON_ID)
            {
                renderer = gtk_cell_renderer_pixbuf_new();
                g_value_init(&value, G_TYPE_FLOAT);
                g_value_set_float(&value, 0.0);
                g_object_set_property(G_OBJECT(renderer), "xalign", &value); 

                column = gtk_tree_view_column_new ();
                gtk_tree_view_column_pack_start (column, renderer, TRUE);
                gtk_tree_view_column_set_attributes (column,renderer,"icon-name", MPDDATA_MODEL_COL_ICON_ID,NULL);

                gtk_tree_view_column_set_resizable(column, TRUE);
                gtk_tree_view_column_set_fixed_width(column, 20);
            }
            else{
                renderer = gtk_cell_renderer_text_new();
                column = gtk_tree_view_column_new_with_attributes (columnname, renderer,
                        "text", valuerow,NULL);
                g_value_init(&value, G_TYPE_INT);
                g_value_set_int(&value, PANGO_ELLIPSIZE_END);
                g_object_set_property(G_OBJECT(renderer), "ellipsize", &value);	
                gtk_tree_view_column_set_resizable(column, TRUE);
                if(GMPC_IS_MPDDATA_MODEL_PLAYLIST(gtk_tree_view_get_model(GTK_TREE_VIEW(self))))
                {
                    g_object_set(G_OBJECT(renderer), "weight-set", TRUE, NULL);
                    gtk_tree_view_column_set_cell_data_func (column,renderer,self_highlight_row, NULL, NULL);
                }

            }
            gtk_tree_view_column_set_sizing(column,GTK_TREE_VIEW_COLUMN_FIXED);
            gtk_tree_view_column_set_reorderable(column, TRUE);

            self->_priv->columns[position] = column;

            if(self->_priv->do_sort)
            {
                gtk_tree_view_column_set_sort_column_id(column,valuerow); 
                gtk_tree_view_column_set_sort_indicator(column, TRUE);
            }

            return column;
        }
    /**
     * Opens a column editor 
     */	
    public
        void
        edit_columns(self)
        {
            GtkWidget *dialog = egg_column_chooser_dialog_new(GTK_TREE_VIEW(self));
            gtk_widget_show_all(dialog);
            gtk_dialog_run(GTK_DIALOG(dialog));
            self_save_column_setup(self);
        }
}
