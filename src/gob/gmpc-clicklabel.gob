requires 2.0.0

%headertop{
#include <gtk/gtk.h>
%}


class Gmpc:ClickLabel from Gtk:Event:Box
{
	private gint size = {10};
	public gint do_italic = {FALSE};
	public gint do_bold = {TRUE};
	public GtkWidget *label = {NULL};
    private GdkCursor *hand_cursor = {gdk_cursor_new(GDK_HAND2)} destroywith gdk_cursor_unref;

	property INT do_bold
		(nick = "Bold when mouse over",
		 blurb = "Bold when mouse over",
		 default_value = TRUE,
		export,
		link);

	/* initialize, set signal handlers */
	init(self)
	{
		g_signal_connect(G_OBJECT(self), "enter-notify-event",G_CALLBACK(self_focus_in_event), NULL);	
		g_signal_connect(G_OBJECT(self), "leave-notify-event", G_CALLBACK(self_focus_out_event), NULL);	
		g_signal_connect(G_OBJECT(self), "button-release-event", G_CALLBACK(self_button_release), NULL);	
	}

	public
	void set_padding(self, gint x,gint y)
	{
		gtk_misc_set_padding(GTK_MISC(self->label), x,y);
	}
	/* passing along the signal */
	private
	void button_release(self,GdkEventButton *event, gpointer data)
	{
		self_clicked(self,NULL);
	}
	private
	gboolean focus_in_event(self, GdkEventFocus *event, gpointer data)
	{
		PangoAttrList *attrs = NULL;
		PangoAttribute *attr = NULL;
		attrs = pango_attr_list_new ();
		if(self->do_bold)
		{
			attr = pango_attr_weight_new (PANGO_WEIGHT_BOLD);
			attr->start_index = 0;
			attr->end_index = -1;
			pango_attr_list_change (attrs, attr);
		}
		if(self->do_italic)
		{
			attr = pango_attr_style_new (PANGO_STYLE_ITALIC);
			attr->start_index = 0;
			attr->end_index = -1;
			pango_attr_list_change (attrs, attr);
		}

		attr = pango_attr_size_new (self->_priv->size);
		attr->start_index = 0;
		attr->end_index = -1;
		pango_attr_list_change (attrs, attr);

		gtk_label_set_attributes(GTK_LABEL(self->label), attrs);
		pango_attr_list_unref (attrs);
		gdk_window_set_cursor(GTK_WIDGET(self)->window, self->_priv->hand_cursor);
		return TRUE;
	}
	private
	gboolean focus_out_event(self, GdkEventFocus *event, gpointer data)
	{
		PangoAttrList *attrs = NULL;
		PangoAttribute *attr = NULL;
		attrs = pango_attr_list_new ();

		attr = pango_attr_size_new (self->_priv->size);
		attr->start_index = 0;
		attr->end_index = -1;
		pango_attr_list_change (attrs, attr);

		if(self->do_italic)
		{
			attr = pango_attr_style_new (PANGO_STYLE_ITALIC);
			attr->start_index = 0;
			attr->end_index = -1;
			pango_attr_list_change (attrs, attr);
		}


		gtk_label_set_attributes(GTK_LABEL(self->label), attrs);
		pango_attr_list_unref(attrs);
		gdk_window_set_cursor(GTK_WIDGET(self)->window,NULL); 
		return TRUE;
	}

	/* clicked signal */
	signal last NONE (POINTER)
		void
		clicked (self, gpointer data)
		{

		}
	public
		void
		set_text (self , const gchar *value (check null))
		{
			gtk_label_set_text(GTK_LABEL(self->label), value);
		}	
	public 
		void
		set_ellipsize(self,PangoEllipsizeMode el)
		{
			gtk_label_set_ellipsize(GTK_LABEL(self->label), el);
		}
	public 
	void
	font_size(self,gint size_diff)
	{
		PangoAttrList *attrs = NULL;
		PangoAttribute *attr = NULL;
		self->_priv->size += size_diff*PANGO_SCALE;

		
		
		attrs = pango_attr_list_new ();
		attr = pango_attr_size_new (self->_priv->size);
		attr->start_index = 0;
		attr->end_index = -1;
		pango_attr_list_change (attrs, attr);
		if(self->do_italic)
		{
			attr = pango_attr_style_new (PANGO_STYLE_ITALIC);
			attr->start_index = 0;
			attr->end_index = -1;
			pango_attr_list_change (attrs, attr);
		}


		gtk_label_set_attributes(GTK_LABEL(self->label), attrs);
		pango_attr_list_unref(attrs);
	}

	public 
	void
	set_do_italic(self,gboolean toggle)
	{
		PangoAttrList *attrs = NULL;
		PangoAttribute *attr = NULL;
		self->do_italic = toggle;

		
		
		attrs = pango_attr_list_new ();
		attr = pango_attr_size_new (self->_priv->size);
		attr->start_index = 0;
		attr->end_index = -1;
		pango_attr_list_change (attrs, attr);
		if(self->do_italic)
		{
			attr = pango_attr_style_new (PANGO_STYLE_ITALIC);
			attr->start_index = 0;
			attr->end_index = -1;
			pango_attr_list_change (attrs, attr);
		}
	
		gtk_label_set_attributes(GTK_LABEL(self->label), attrs);
		pango_attr_list_unref(attrs);
	}

	public
		GtkWidget *new(gchar *value (check null))
		{
			PangoContext *pc = NULL;
			PangoFontDescription *pfd = NULL;
			PangoAttrList *attrs = NULL;
			PangoAttribute *attr = NULL;
			Self *lb = GET_NEW;
			/* create strings, should make this smarter */
			/* label */
			lb->label = gtk_label_new(value);
			//gtk_label_set_markup(GTK_LABEL(lb->label), lb->_priv->text);
			gtk_misc_set_alignment(GTK_MISC(lb->label), 0,0.5);
			/* setup event box */
			gtk_event_box_set_visible_window(GTK_EVENT_BOX(lb), FALSE);	
			gtk_container_add(GTK_CONTAINER(lb),lb->label);
			gtk_label_set_ellipsize(GTK_LABEL(lb->label), PANGO_ELLIPSIZE_END);

			pc = gtk_widget_get_pango_context(GTK_WIDGET(lb->label));
			pfd = pango_context_get_font_description(pc);
			lb->_priv->size = pango_font_description_get_size(pfd);

			attrs = pango_attr_list_new ();
			attr = pango_attr_size_new (lb->_priv->size);
			attr->start_index = 0;
			attr->end_index = -1;

			if(lb->do_italic)
			{
				attr = pango_attr_style_new (PANGO_STYLE_ITALIC);
				attr->start_index = 0;
				attr->end_index = -1;
				pango_attr_list_change (attrs, attr);
			}
			pango_attr_list_change (attrs, attr);

			gtk_label_set_attributes(GTK_LABEL(lb->label), attrs);
			pango_attr_list_unref(attrs);

			return (GtkWidget *)lb;
		}

}

