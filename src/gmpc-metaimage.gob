/* Gnome Music Player Client (GMPC)
 * Copyright (C) 2004-2009 Qball Cow <qball@sarine.nl>
 * Project homepage: http://gmpc.wikia.com/
 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

requires 2.0.0

%ph{
#include "main.h"
#include "metadata-cache.h"
#include "misc.h"
%}

%headertop{
#include <gtk/gtk.h>
#include <metadata.h>
#include <libmpd/libmpd.h>
#include "gmpc-extras.h"
%}

%{
static unsigned int num_drag_targets = 4; /* skip hyperlinks for now */
static GtkTargetEntry data_image_drag_target[] = 
{
    { (gchar *)"image/jpeg", 0, 0 },
    { (gchar *)"image/png",  0, 1 },
    { (gchar *)"image/gif",  0, 2 },
	{ (gchar *)"text/uri-list", 0, 3},
    { (gchar *)"_NETSCAPE_URL", 0,4},
    { (gchar *)"x-url/http", 0,5}
};
%}


%ph{
/**
 * Indicate the state
 */
typedef enum _GmpcMetaImageState{
	STATE_NA,
	STATE_FETCHING,
	STATE_IMAGE,
    STATE_EMPTY,
	NUM_STATES
}GmpcMetaImageState;



%}



class Gmpc:MetaImage from Gtk:Event:Box{
	private GmpcMetaImageState state = {STATE_EMPTY};
    private int refresh = FALSE;
	private gulong status_signal = {0};
	private gulong connect_signal = {0};
	private gulong meta_id = {0};

    private gulong metadata_force_reload = {0};

	private gchar *image_url = {NULL};

	private mpd_Song *song = {NULL} destroywith mpd_freeSong;

	/** Public */

	public int size = {64};
	public MetaDataType image_type = {META_ALBUM_ART};
	public MpdObj *connection= {NULL};
	public gboolean hide_on_na = {FALSE};
	public gboolean squared = {TRUE};
	public gchar *no_cover_icon = {g_strdup("gmpc-no-cover")} destroywith g_free;
	public gchar *loading_cover_icon = {g_strdup("gmpc-loading-cover")} destroywith g_free;

    private gulong expose_id = {0};
    public gboolean scale_up = FALSE;
	/**
	 * I want fully set/get control,so I don't use property stuff,
	 * is there a way around this?
	 */
	public gboolean is_visible = {TRUE};

	property INT image_type 
		(nick = "Image type",
		blurb = "Type of the image, like artist art",
		default_value = META_ALBUM_ART,
		export,
		link);
		 
	property INT size
		(nick = "Size",
		blurb = "Size of the image",
		default_value = 64,
		export,
		link);

	property BOOLEAN hide_on_na
		(nick = "HideOnNA",
		blurb = "Hide the image when not available",
		default_value = FALSE,
		export,
		link);

    property BOOLEAN scale_up
        (nick = "Scale image up",
        blurb = "Scale cover art up",
        default_value = FALSE,
        export,
        link);

	property BOOLEAN squared
		(nick = "Squared",
			blurb = "Keep the widget squared",
			default_value = TRUE,
			link);
    public void set_no_cover_icon (self, const gchar *name)
    {
        if(self->no_cover_icon) {
            q_free(self->no_cover_icon);
        }
        self->no_cover_icon = g_strdup(name);
    }
    public void set_loading_cover_icon (self, const gchar *name)
    {
        if(self->loading_cover_icon) {
            q_free(self->loading_cover_icon);
        }
        self->loading_cover_icon = g_strdup(name);
    }
    public void set_squared (self, const gboolean item)
    {
        self->squared = item;
    }
    public void set_connection(self, MpdObj *conn)
    {
        self->connection = conn;
        if(conn)
        {
            self->_priv->status_signal = g_signal_connect_swapped(G_OBJECT(gmpcconn), 
                    "status_changed",
                    G_CALLBACK(self_update_cover),
                    G_OBJECT(self));

            self->_priv->connect_signal = g_signal_connect_swapped(G_OBJECT(gmpcconn), 
                    "connection_changed",
                    G_CALLBACK(self_connection_changed),
                    G_OBJECT(self));                            		
        }
    }
	private GtkWidget *image = { (GtkWidget *)gmpc_image_new()} ;
	init (self)
	{
        GtkWidget *win = NULL;
		gtk_container_add(GTK_CONTAINER(self), self->_priv->image);		
		gtk_container_set_resize_mode(GTK_CONTAINER(self), GTK_RESIZE_IMMEDIATE);
		gtk_widget_show_all(GTK_WIDGET(self));

		g_signal_connect_swapped(G_OBJECT(self->_priv->image), "button-press-event", G_CALLBACK(self_menu_populate_callback), self);
		self->_priv->meta_id = g_signal_connect(G_OBJECT(gmw), "data-changed", G_CALLBACK(self_meta_callback), self);
		gtk_widget_add_events(GTK_WIDGET(self->_priv->image), GDK_POINTER_MOTION_MASK);
		gtk_widget_set_no_show_all(GTK_WIDGET(self),TRUE);

        win = gtk_window_new(GTK_WINDOW_POPUP); 
        gtk_window_set_resizable(GTK_WINDOW(win), FALSE);
        gtk_widget_modify_bg(win, GTK_STATE_NORMAL, &(GTK_WIDGET(self)->style->black));
        gtk_container_set_border_width(GTK_CONTAINER(win), 6);
        gtk_container_add(GTK_CONTAINER(win), gtk_image_new());

        gtk_widget_set_tooltip_window(GTK_WIDGET(self), GTK_WINDOW(win));
        g_signal_connect(G_OBJECT(self), "query-tooltip", G_CALLBACK(self_tooltip_query), win);
    }
    private 
    gboolean tooltip_query(self, gint x, gint y,gboolean keyboard_mode, GtkTooltip *tip, GtkWidget *win)
    {
        if(self->_priv->state == STATE_IMAGE)
        {
            if(self->_priv->image_url)
            {
                gint width,height;
                if(gdk_pixbuf_get_file_info(self->_priv->image_url, &width, &height))
                {
                    GtkWidget *image = gtk_bin_get_child(GTK_BIN(win));
                    GdkPixbuf *pb = gdk_pixbuf_new_from_file_at_scale(self->_priv->image_url, (width > 350)?350:width,(height >350)?350:height, TRUE, NULL);
                    screenshot_add_border(&pb);
                    gtk_image_set_from_pixbuf(GTK_IMAGE(image), pb);
                    gtk_widget_show(image);
                    g_object_unref(pb);
                    return TRUE;
                }
            }
        }
        return FALSE;
    }

	override (G:Object)
		void 
		dispose(G:Object *obj)
		{
			Self *self = GMPC_METAIMAGE(obj); 
            if(self->_priv->meta_id)
			{
				g_signal_handler_disconnect(G_OBJECT(gmw),self->_priv->meta_id);
				self->_priv->meta_id =  0;
			}
            if(self->_priv->metadata_force_reload)
            {
                g_signal_handler_disconnect(G_OBJECT(gmw),self->_priv->metadata_force_reload);
                self->_priv->metadata_force_reload =  0;
            }
			if(self->_priv->image_url) {
				q_free(self->_priv->image_url);
			}
			if(self->_priv->status_signal){
				g_signal_handler_disconnect(G_OBJECT(gmpcconn), self->_priv->status_signal);
				self->_priv->status_signal =0;
			}
			if(self->_priv->connect_signal){
				g_signal_handler_disconnect(G_OBJECT(gmpcconn), self->_priv->connect_signal);
				self->_priv->connect_signal=0;
			}
			PARENT_HANDLER(obj);
		}
    private 
        void 
        drag_data_recieved (self,
                GdkDragContext     *context,
                gint                x,
                gint                y,
                GtkSelectionData   *data,
                guint               info,
                guint               dnd_time,
                GtkWidget          *widget
                )
        {
            int found = FALSE;
            if(self->_priv->song)
            {
                if(info < num_drag_targets)
                {
                    gchar **uri =  gtk_selection_data_get_uris(data);   
                    /* Only one uri is interresting */
                    if(uri && uri[0])
                    {
                        gchar *path = g_filename_from_uri(uri[0], NULL, NULL);

                        /* try to open it */
                        if(path && gdk_pixbuf_get_file_info(path, NULL,NULL))
                        {
                            mpd_Song *song = mpd_songDup(self->_priv->song);
                            /* Create MetaData object */
                            MetaData* met = meta_data_new();
                            met->type = self->image_type;
                            met->plugin_name = "User set";
                            met->content_type = META_DATA_CONTENT_URI;
                            met->content = path; path = NULL;
                            met->size = -1;
                            /* set cache */
                            meta_data_set_cache(song, META_DATA_AVAILABLE, met); 
                            /* Signal */
                            gmpc_meta_watcher_data_changed(gmw, song, self->image_type, META_DATA_AVAILABLE, met);
                            /* free Metadata object */
                            meta_data_free(met);
                            found = TRUE;
                            mpd_freeSong(song);
                        }
                        g_free(path);
                    }
                    g_strfreev(uri);
                }
            }

            gtk_drag_finish(context, found, FALSE, dnd_time);
        }
        /* hack to make the "delayed" image load when it gets visible"
         */
        private 
        gboolean 
        expose_event(self, GdkEventExpose *event, gpointer data)
        {
            g_signal_handler_disconnect(G_OBJECT(self), self->_priv->expose_id);
            self->_priv->expose_id = 0;
            self_update_cover_from_song_delayed_real(self);
            return FALSE;
        }

        public
        GtkWidget *new_size(int type, int size)
        {
            Self *gmi =  GET_NEW;
            gmi->image_type = type;
            gmi->size = size;


            gtk_event_box_set_visible_window(GTK_EVENT_BOX(gmi), FALSE);
            gtk_drag_dest_set(GTK_WIDGET(gmi),
                    GTK_DEST_DEFAULT_ALL,
                    data_image_drag_target, num_drag_targets,
                    GDK_ACTION_COPY|GDK_ACTION_LINK|GDK_ACTION_DEFAULT|GDK_ACTION_MOVE);

            g_signal_connect_swapped (G_OBJECT (gmi),"drag-data-received",
                    GTK_SIGNAL_FUNC (self_drag_data_recieved),gmi);

            gmi->_priv->metadata_force_reload = g_signal_connect_swapped(G_OBJECT(gmw), "force-reload", G_CALLBACK(self_reload_image), gmi);

            return (GtkWidget *)gmi;
        }
	public 
		GtkWidget * new (int type)
		{
			Self *gmi =  GET_NEW;
			gmi->image_type = type;

            gtk_event_box_set_visible_window(GTK_EVENT_BOX(gmi), FALSE);
            gtk_drag_dest_set(GTK_WIDGET(gmi),
                    GTK_DEST_DEFAULT_ALL,
                data_image_drag_target, num_drag_targets,
                GDK_ACTION_COPY|GDK_ACTION_LINK|GDK_ACTION_DEFAULT|GDK_ACTION_MOVE);
        g_signal_connect_swapped (G_OBJECT (gmi),"drag-data-received",
                GTK_SIGNAL_FUNC (self_drag_data_recieved),gmi);
            gmi->_priv->metadata_force_reload = g_signal_connect_swapped(G_OBJECT(gmw), "force-reload", G_CALLBACK(self_reload_image), gmi);
            return (GtkWidget *)gmi;
		}

	public	
		void
		update_cover(self, MpdObj *mi, ChangedStatusType what, GmpcConnection *gc)
		{

			if(self->connection && what&(MPD_CST_STATE|MPD_CST_SONGID|MPD_CST_SONGPOS|MPD_CST_PLAYLIST) && self->is_visible)
			{
				int state = mpd_player_get_state(self->connection);
				if(state == MPD_PLAYER_STOP || state == MPD_PLAYER_UNKNOWN)
				{
                    self->_priv->refresh = TRUE;
					self_set_cover_na(self);
				}
				else {
					mpd_Song *song = mpd_playlist_get_current_song(self->connection);
					if(song)
					{
                        if( self->_priv->refresh == FALSE && 
                            self->_priv->song && 
                            self->_priv->song->artist && 
                            song->artist && 
                            strcmp(song->artist, self->_priv->song->artist) == 0)
                        {
                            /* If we are artist iamge, don't update, same artist */
                            if(self->image_type == META_ARTIST_ART ) return;
                            /* If we are album, check if album matches too */
                            else if(self->image_type == META_ALBUM_ART && 
                                self->_priv->song->album && song->album &&
                                strcmp(self->_priv->song->album, song->album) == 0){
                                return;
                            }
                        }
						self_update_cover_from_song(self, song);
					}
					else
					{
						self_set_cover_na(self);
					}
                    self->_priv->refresh = FALSE;
				}

			}
		}
	private
		void
		connection_changed(self,MpdObj *mi, int connect, GmpcConnection *gmpconn)
		{
			if(!connect)
			{
				self_set_cover_na(self);
			}
            else
            {
                if(self->connection)
                {
                    int state = mpd_player_get_state(self->connection);
                    if(state != MPD_PLAYER_STOP && state != MPD_PLAYER_UNKNOWN)
                    {
                        mpd_Song *song = mpd_playlist_get_current_song(self->connection);
                        if(song){
                            self_update_cover_from_song(self, song);
                        }
                    }
                }

            }

		}

	public 
		void
		update_cover_from_song(self, mpd_Song *song)
		{
			MetaDataResult ret;
            MetaData *met= NULL;


			if(self->_priv->song)
				mpd_freeSong(self->_priv->song);
            self->_priv->song = NULL;

			if(!song)
			{
				self_set_cover_na(self);
				return;
			}
            self->_priv->song = mpd_songDup(song);

			ret = gmpc_meta_watcher_get_meta_path(gmw,song, self->image_type, &met);
			if(ret == META_DATA_FETCHING)
			{
				self_set_cover_fetching(self);
			}else if (ret == META_DATA_AVAILABLE) {
                    if(met->content_type == META_DATA_CONTENT_URI)
                    {
                        const gchar *path = meta_data_get_uri(met);
                        self_set_cover_from_path(self,path); 
                    }else{
                        self_set_cover_na(self);
                    }
			} else {
				self_set_cover_na(self);
			}
			if(met)
			{
			    meta_data_free(met);	
			}
		}
        private
        gboolean
        update_cover_from_song_delayed_real(self)
        {
            MetaData *met= NULL;
            int ret = gmpc_meta_watcher_get_meta_path(gmw,self->_priv->song, self->image_type, &met);
            if(ret == META_DATA_FETCHING)
            {
                self_set_cover_fetching(self);
            }else if (ret == META_DATA_AVAILABLE) {
                if(met->content_type == META_DATA_CONTENT_URI)
                {
                    const gchar *path = meta_data_get_uri(met);
                    self_set_cover_from_path(self,path); 
                } else {
                    self_set_cover_na(self);
                }
            }
            else{
                self_set_cover_na(self);
            }
            if(met)
            {
                meta_data_free(met);
            }

            return FALSE;
        }
	public 
		void
		update_cover_from_song_delayed(self, mpd_Song *song)
        {
            if(self->_priv->song)
                mpd_freeSong(self->_priv->song);

            gtk_widget_set_size_request(GTK_WIDGET(self), self->size, self->size);
            self->_priv->song = mpd_songDup(song);
            /* hack to make it load when it gets visible */
            self->_priv->expose_id = g_signal_connect(G_OBJECT(self), "expose-event", G_CALLBACK(self_expose_event) , NULL);
        }
		
	private
	void
	meta_callback(GmpcMetaWatcher *gmv, mpd_Song *song, MetaDataType type, MetaDataResult ret, MetaData *met,gpointer data)
    {
        Self *self = data;
        if(!song || !self || !self->_priv || !self->_priv->song)
            return;

        /**
         * Check for fields
         */
        if(self->image_type != type)
            return;

        if(!gmpc_meta_watcher_match_data(self->image_type, self->_priv->song, song))
        {
            return;
        }

        /**
         * If mpd is stopped before the result is back, set the cover to na, and ignore the result
         */
        if(self->connection && mpd_player_get_state(self->connection) == MPD_PLAYER_STOP)
        {
            self_set_cover_na(self);
        }
        else
        {
            if(ret == META_DATA_AVAILABLE) {
                if(met->content_type == META_DATA_CONTENT_URI){
                    const char *path = meta_data_get_uri(met);
                    self_set_cover_from_path(self,path); 
                }else{
                    self_set_cover_na(self);
                    debug_printf(DEBUG_ERROR, "Method not implemented: %i", met->content_type);
                }
            } else if (ret == META_DATA_FETCHING) {
                self_set_cover_fetching(self);
            } else {
                self_set_cover_na(self);
            }
        }
    }


	public 
		void
		set_cover_na(self)
        {
            int border = FALSE;
            GError *error = NULL;
            GdkPixbuf *pb2 = NULL; 

            if(self->_priv->state == STATE_NA) {
                return;
            }
            self->_priv->state = STATE_NA;

            if(self->_priv->image_url)
            {
                q_free(self->_priv->image_url);
                self->_priv->image_url = NULL;
            }
            if(self->hide_on_na)
            {		
                gtk_widget_hide(GTK_WIDGET(self));
                return;
            }

            if(cfg_get_single_value_as_int_with_default(config, "metaimage", "addcase",TRUE) && self->image_type == META_ALBUM_ART){
                pb2 = gtk_icon_theme_load_icon(gtk_icon_theme_get_default(), "stylized-no-cover", self->size, 0,&error);
                border = TRUE;
                if(error) {
                    debug_printf(DEBUG_ERROR, "Following error loading stylized-no-cover: %s", error->message);
                    g_error_free(error);
                    error = NULL;
                }
            }
            if(!pb2){
                pb2 = gtk_icon_theme_load_icon(gtk_icon_theme_get_default(), self->no_cover_icon, self->size, 0,&error);
                if(error) {
                    debug_printf(DEBUG_ERROR, "Following error loading stylized-no-cover: %s", error->message);
                    g_error_free(error);
                    error = NULL;
                }
                border = FALSE;
            }

            if(pb2) {
                if(self->squared) {
                    gtk_widget_set_size_request(GTK_WIDGET(self), self->size, self->size);
                } else {
                    gtk_widget_set_size_request(GTK_WIDGET(self), gdk_pixbuf_get_width(pb2), gdk_pixbuf_get_height(pb2));
                    gmpc_image_clear_pixbuf(GMPC_IMAGE(self->_priv->image));
                }
                gmpc_image_set_pixbuf(GMPC_IMAGE(self->_priv->image), pb2,border);
                g_object_unref(pb2);
            } else {
                /* If failed to load an image, clear it */
                gmpc_image_clear_pixbuf(GMPC_IMAGE(self->_priv->image));
            }
        }
	public 
		void
		set_cover_fetching(self)
        {
            int border = FALSE;
            GError *error = NULL;
            GdkPixbuf *pb2 = NULL;
            if(self->_priv->state == STATE_FETCHING) {
                return;
            }
            self->_priv->state = STATE_FETCHING;
            if(self->_priv->image_url)
            {
                q_free(self->_priv->image_url);
                self->_priv->image_url = NULL;
            }
            if(self->hide_on_na)
            {		
                gtk_widget_hide(GTK_WIDGET(self));
            }


            if(cfg_get_single_value_as_int_with_default(config, "metaimage", "addcase",TRUE) && self->image_type == META_ALBUM_ART){
                pb2 = gtk_icon_theme_load_icon(gtk_icon_theme_get_default(), "stylized-fetching-cover", self->size, 0,&error);
                if(error) {
                    debug_printf(DEBUG_ERROR, "Following error loading stylized-no-cover: %s", error->message);
                    g_error_free(error);
                    error = NULL;
                }
                border=TRUE;
//                if(pb2)
  //                  screenshot_add_border(&pb2);
            }
            if(!pb2){
                pb2 = gtk_icon_theme_load_icon(gtk_icon_theme_get_default(), self->loading_cover_icon, self->size, 0,&error);
                if(error) {
                    debug_printf(DEBUG_ERROR, "Following error loading stylized-no-cover: %s", error->message);
                    g_error_free(error);
                    error = NULL;
                }
                border = FALSE;

            }

            if(self->squared) {
                gtk_widget_set_size_request(GTK_WIDGET(self), self->size, self->size);
            } else {
                gtk_widget_set_size_request(GTK_WIDGET(self), gdk_pixbuf_get_width(pb2), gdk_pixbuf_get_height(pb2));
                gmpc_image_clear_pixbuf(GMPC_IMAGE(self->_priv->image));
            }

            if(pb2) {
//                gmpc_image_clear_pixbuf(GMPC_IMAGE(self->_priv->image));
                gmpc_image_set_pixbuf(GMPC_IMAGE(self->_priv->image), pb2,border);
                g_object_unref(pb2);
            } else {
                /* If failed to load an image, clear it */
                gmpc_image_clear_pixbuf(GMPC_IMAGE(self->_priv->image));
            }
        }

    public	
        void
        set_cover_from_path(self, const gchar *path)
        {
            int width = 0; 
            int height = 0;
            GdkPixbuf *pb = NULL;

            self->_priv->state = STATE_IMAGE;
            
            if(self->_priv->image_url)
            {
                if(strcmp(path, self->_priv->image_url) == 0)
                {
                    return;
                }
                q_free(self->_priv->image_url);
                self->_priv->image_url = NULL;
            }

            if(gdk_pixbuf_get_file_info(path,&width, &height))
            {
                int set = 0;
                /* save url */
                self->_priv->image_url = g_strdup(path); 

                if(cfg_get_single_value_as_int_with_default(config, "metaimage", "addcase",TRUE) && self->image_type == META_ALBUM_ART) 
                {
                    int tempw,temph;
                    int size = (self->size > MIN(width,height))? MIN(width,height):self->size; 
                    float spineRatio = 5.0/65.0;
                    int spineWidth = (size)*spineRatio;
                    GdkPixbuf *blank=NULL,*pb2=NULL;
                    const gchar *path2;
                    GtkIconInfo *ii = gtk_icon_theme_lookup_icon(gtk_icon_theme_get_default(),
                            "stylized-cover", 
                            size, 0);
                    if(self->scale_up) {
                        size = self->size;
                    }
                    /* load the case */
                    if(ii){
                        path2 = gtk_icon_info_get_filename(ii);
                        if(path2){
                            pb2 = gdk_pixbuf_new_from_file_at_scale(path2,size, size,TRUE,NULL);
                        }
                        gtk_icon_info_free(ii);
                    }
                    if(pb2 != NULL)
                    {
                        /* Scale the cover to fit inside the case */
                        tempw =  gdk_pixbuf_get_width(pb2)-spineWidth;
                        if((gdk_pixbuf_get_height(pb2)/(double)height)*width < tempw){
                            pb = gdk_pixbuf_new_from_file_at_scale(path,tempw, -1,TRUE,NULL);
                        }else{
                            pb = gdk_pixbuf_new_from_file_at_scale(path,-1,gdk_pixbuf_get_height(pb2),TRUE,NULL);
                        }

                        width = gdk_pixbuf_get_width(pb2);
                        height = gdk_pixbuf_get_height(pb2);

                        /* render */
                        blank = gdk_pixbuf_new(GDK_COLORSPACE_RGB, TRUE, 8,width,height);
                        gdk_pixbuf_fill(blank, 0x000000FF);
                        tempw = ((width-spineWidth)>= gdk_pixbuf_get_width(pb))?gdk_pixbuf_get_width(pb):(width-spineWidth);
                        temph = (height >= gdk_pixbuf_get_height(pb))? gdk_pixbuf_get_height(pb):height;
                        gdk_pixbuf_copy_area(pb, 0,0,
                                tempw,temph,
                                blank,width-tempw,0);
                        if(pb2)
                        {
                            gdk_pixbuf_composite(pb2,blank,0,0,gdk_pixbuf_get_width(pb2),gdk_pixbuf_get_height(pb2),0,0,1,1,GDK_INTERP_BILINEAR,250);
                            g_object_unref(pb2);
                        }
                        g_object_unref(pb);
                        pb = blank;

                        if(!self->squared) 
                            gmpc_image_clear_pixbuf(GMPC_IMAGE(self->_priv->image));

                        //                    screenshot_add_border(&pb);
                        gmpc_image_set_pixbuf(GMPC_IMAGE(self->_priv->image), pb,TRUE);
                        g_object_unref(pb);
                        set = 1;
                    }
                }
                if(!set){
                    int size = (self->size > MIN(width,height))? MIN(width,height):self->size; 
                    /* calculate it */
                    if(width > height) {
                        height = (height*size)/((gdouble)width);
                        width = size;
                    }
                    else {
                        width = (width*size)/((gdouble)height);
                        height = size;
                    }
                    pb = gdk_pixbuf_new_from_file_at_scale(path,size,size,TRUE,NULL);
                    if(!self->squared) 
                        gmpc_image_clear_pixbuf(GMPC_IMAGE(self->_priv->image));
                    gmpc_image_set_pixbuf(GMPC_IMAGE(self->_priv->image), pb,TRUE);
                    g_object_unref(pb);
                }
                /**
                 * Set sizing, also set size on non-squared, so the widget resizes propperly
                 */
                if(self->squared)
                {
                    gtk_widget_set_size_request(GTK_WIDGET(self), self->size, self->size);
                }
				else
                {
                    gtk_widget_set_size_request(GTK_WIDGET(self), width+2, height+2);
                }
			}
            else
                gmpc_image_clear_pixbuf(GMPC_IMAGE(self->_priv->image));
			if(self->is_visible)
			{
				gtk_widget_show(GTK_WIDGET(self));
			}
		}

	public 
		void
		set_is_visible(self, gboolean is_visible)
		{
			self->is_visible = is_visible;
			if(self->is_visible)
			{
				if(self->connection)
				{
					self_update_cover(self,self->connection, MPD_CST_STATE, NULL);
				}
			} else {
				gtk_widget_hide(GTK_WIDGET(self));
			}
		}

	public 
	void
	query_refetch(self)
	{
		if(self->_priv->song)
		{
			MetaDataResult ret;
            MetaData *met = NULL;

			ret = gmpc_meta_watcher_get_meta_path(gmw,self->_priv->song, self->image_type|META_QUERY_NO_CACHE, &met);
			if(ret == META_DATA_FETCHING)
			{
				self_set_cover_fetching(self);
			}else if (ret == META_DATA_AVAILABLE) {
                    if(met->content_type == META_DATA_CONTENT_URI)
                    {
                        const gchar *path = meta_data_get_uri(met);
                        self_set_cover_from_path(self,path); 
                    }else{
                        debug_printf(DEBUG_ERROR, "Not implemented");
                        self_set_cover_na(self);
                    }
			} else {
				self_set_cover_na(self);
			}
			if(met)
			{
				meta_data_free(met);
			}
		}
	}


	private 
	gboolean	
	menu_populate_callback(self,GdkEventButton *event,  gpointer data)
	{
		if(self->_priv->song && event->button == 3)
		{
			GtkWidget *menu = gtk_menu_new();
			GtkWidget *item = NULL; 

			item = gtk_image_menu_item_new_with_label(_("Refetch"));
			gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(item), gtk_image_new_from_stock(GTK_STOCK_REFRESH, GTK_ICON_SIZE_MENU));
			g_signal_connect_swapped(G_OBJECT(item), "activate", G_CALLBACK(self_query_refetch),self);
			gtk_menu_shell_append(GTK_MENU_SHELL(menu), item);

			item = gtk_image_menu_item_new_with_label(_("Select file"));
			gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(item), gtk_image_new_from_stock(GTK_STOCK_OPEN, GTK_ICON_SIZE_MENU));
			g_signal_connect_swapped(G_OBJECT(item), "activate", G_CALLBACK(self_select_file),self);
			gtk_menu_shell_append(GTK_MENU_SHELL(menu), item);

			item = gtk_image_menu_item_new_from_stock(GTK_STOCK_CLEAR, NULL);
			g_signal_connect_swapped(G_OBJECT(item), "activate", G_CALLBACK(self_clear_entry),self);
			gtk_menu_shell_append(GTK_MENU_SHELL(menu), item);

			item = gtk_image_menu_item_new_with_label(_("Metadata selector"));
			gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(item), gtk_image_new_from_stock(GTK_STOCK_EDIT, GTK_ICON_SIZE_MENU));
			g_signal_connect_swapped(G_OBJECT(item), "activate", G_CALLBACK(self_select_metadata_editor),self);
			gtk_menu_shell_append(GTK_MENU_SHELL(menu), item);

			gtk_widget_show_all(menu);
			gtk_menu_popup(GTK_MENU(menu), NULL, NULL,NULL, NULL, event->button, event->time);
			return TRUE;
		}
		return FALSE;
	}

	private
	void
	clear_entry(self)
	{
        MetaData *met = meta_data_new();
        met->content_type = META_DATA_CONTENT_EMPTY;
        met->plugin_name = "User set";
        met->type = self->image_type;
		meta_data_set_cache(self->_priv->song, META_DATA_UNAVAILABLE, met); 
		gmpc_meta_watcher_data_changed(gmw, self->_priv->song, self->image_type, META_DATA_UNAVAILABLE, NULL);
        meta_data_free(met);
	}
    private void
    select_metadata_editor(self)
    {
		gmpc_meta_data_edit_window_new(self->_priv->song,self->image_type);
    }

	public
	void
	select_file(self)
	{
		mpd_Song *song = mpd_songDup(self->_priv->song);
		MetaDataType type = self->image_type;
		GtkFileFilter *gff = gtk_file_filter_new();
		GtkWidget *fcd = gtk_file_chooser_dialog_new(_("Select File"),NULL,
					 GTK_FILE_CHOOSER_ACTION_OPEN,
				      GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
				      GTK_STOCK_OPEN, GTK_RESPONSE_ACCEPT,
				      NULL);
		gtk_file_filter_set_name(gff, _("Images"));
		gtk_file_filter_add_pixbuf_formats(gff);
		gtk_file_chooser_add_filter(GTK_FILE_CHOOSER(fcd), gff);   

		gff = gtk_file_filter_new();
		gtk_file_filter_set_name(gff, _("All"));
		gtk_file_filter_add_pattern(gff, "*");
		gtk_file_chooser_add_filter(GTK_FILE_CHOOSER(fcd), gff);   

		gtk_widget_show_all(fcd);
		switch(gtk_dialog_run(GTK_DIALOG(fcd)))
		{
			case GTK_RESPONSE_ACCEPT:
				{	
					gchar *filename = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(fcd));
                    MetaData *met = meta_data_new();
                    met->type = type;
                    met->plugin_name = "User set";
                    met->content_type = META_DATA_CONTENT_URI;
                    met->content = filename;
                    met->size = -1;
					meta_data_set_cache(song,META_DATA_AVAILABLE, met); 
					gmpc_meta_watcher_data_changed(gmw, song, type, META_DATA_AVAILABLE, met);
                    meta_data_free(met);
				}
			default:
				break;
		} 
		gtk_widget_destroy(fcd);
		mpd_freeSong(song);
	}

	public
	void
	reload_image(self)
	{
		gmpc_image_clear_pixbuf(GMPC_IMAGE(self->_priv->image)); 
		switch(self->_priv->state)
		{
			case STATE_NA:
                    self->_priv->state = STATE_EMPTY;
					self_set_cover_na(self);
					break;
			case STATE_FETCHING:
                    self->_priv->state = STATE_EMPTY;
					self_set_cover_fetching(self);
					break;
			case STATE_IMAGE:
                    if(self->_priv->image_url)
                    {
                        gchar *temp = self->_priv->image_url;
                        self->_priv->image_url = NULL;

                        self_set_cover_from_path(self, temp);
                        g_free(temp);
                    }
            /* fix bitching */
            case STATE_EMPTY:
            case NUM_STATES:
			default:
					break;
		}
	}

    public
    void
    set_image_text(self, gchar *text)
    {
        gmpc_image_set_text(GMPC_IMAGE(self->_priv->image), text);

    }
}
