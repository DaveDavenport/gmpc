/* Gnome Music Player Client (GMPC)
 * Copyright (C) 2004-2009 Qball Cow <qball@sarine.nl>
 * Project homepage: http://gmpc.wikia.com/
 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

requires 2.0.0

%headertop{
#include <gtk/gtk.h>
%}


class Gmpc:ClickLabel from Gtk:Event:Box
{
    /* List with the setup of the label */
    private PangoAttrList *attributes = {pango_attr_list_new()} destroywith pango_attr_list_unref;
    /* size */
	private gint size = {10};
    /* do italic */
	private gint do_italic = {FALSE};
    /* The actual label containing the text */
	private GtkWidget *label = {NULL};
    /* The cursor used when mouse over */
    private GdkCursor *hand_cursor = {gdk_cursor_new(GDK_HAND2)} destroywith gdk_cursor_unref;

	/* initialize, set signal handlers */
	init(self)
	{
		g_signal_connect(G_OBJECT(self), "enter-notify-event",G_CALLBACK(self_focus_in_event), NULL);	
		g_signal_connect(G_OBJECT(self), "leave-notify-event", G_CALLBACK(self_focus_out_event), NULL);	
		g_signal_connect(G_OBJECT(self), "button-release-event", G_CALLBACK(self_button_release), NULL);	
	}

    /* This function update the list of attributes set on the GtkLabel.
     * This includes font-size and italic */
    private 
    void setup_attributes(self)
    {
        PangoAttribute *attr;
        /* Set italic state */
        if(self->_priv->do_italic)
        {
            attr = pango_attr_style_new (PANGO_STYLE_ITALIC);
        }else{
            attr = pango_attr_style_new (PANGO_STYLE_NORMAL);
        }
        attr->start_index = 0;
        attr->end_index = -1;

        /* this will update (or insert) the value in the list */
        pango_attr_list_change (self->_priv->attributes, attr);
        /* set size */
        attr = pango_attr_size_new (self->_priv->size);
        attr->start_index = 0;
        attr->end_index = -1;
        pango_attr_list_change (self->_priv->attributes, attr);

    }
    /* If the left mouse button is pressed, give a "clicked" signal */
	private
	gboolean button_release(self,GdkEventButton *event, gpointer data)
	{
        if(event->button == 1)
            self_clicked(self,NULL);
        /* Continue signal */
        return FALSE;
    }
    /* if the mouse enters the widget, change the cursor to a hand */
	private
	gboolean focus_in_event(self, GdkEventFocus *event, gpointer data)
	{
		gdk_window_set_cursor(GTK_WIDGET(self)->window, self->_priv->hand_cursor);
		return FALSE;
	}

    /* if the mouse leaves the widget, change the cursor to default*/
	private
	gboolean focus_out_event(self, GdkEventFocus *event, gpointer data)
	{
		gdk_window_set_cursor(GTK_WIDGET(self)->window,NULL); 
		return FALSE;
	}
    /********************** PUBLIC API **********************************/
	/* clicked signal */
	signal last NONE (POINTER)
	void
	clicked (self, gpointer data)
	{
	}
    /* Set the paddiong on the label */
	public
	void set_padding(self, gint x,gint y)
	{
		gtk_misc_set_padding(GTK_MISC(self->_priv->label), x,y);
	}
    public
    void
    set_line_wrap_mode(self, PangoWrapMode wrap)
    {
        gtk_label_set_line_wrap_mode(GTK_LABEL(self->_priv->label), wrap);
        gtk_label_set_line_wrap(GTK_LABEL(self->_priv->label), TRUE);
    }

    /* Set the text to be displayed */
	public
    void
    set_text (self , const gchar *value (check null))
	{
        gtk_label_set_text(GTK_LABEL(self->_priv->label), value);
    }	
    /* Set ellipsize mode */
	public 
	void
	set_ellipsize(self,PangoEllipsizeMode el)
	{
        gtk_label_set_ellipsize(GTK_LABEL(self->_priv->label), el);
    }
    /* Set the font size */
	public 
	void
	font_size(self,gint size_diff)
	{
		self->_priv->size += size_diff*PANGO_SCALE;
        self_setup_attributes(self);
	}
    /* Set italic */
	public 
	void
	set_do_italic(self,gboolean toggle)
	{
		self->_priv->do_italic = toggle;
        self_setup_attributes(self);
	}
    /* Construction function */
	public
    GtkWidget *new(const gchar *value (check null))
    {
        PangoContext *pc = NULL;
        PangoFontDescription *pfd = NULL;
        Self *lb = GET_NEW;
        /* label */
        lb->_priv->label = gtk_label_new(value);
        gtk_misc_set_alignment(GTK_MISC(lb->_priv->label), 0,0.5);
        gtk_label_set_ellipsize(GTK_LABEL(lb->_priv->label), PANGO_ELLIPSIZE_END);

        /* setup event box */
        gtk_event_box_set_visible_window(GTK_EVENT_BOX(lb), FALSE);	
        gtk_container_add(GTK_CONTAINER(lb),lb->_priv->label);

        /* Get font size */
        pc = gtk_widget_get_pango_context(GTK_WIDGET(lb->_priv->label));
        pfd = pango_context_get_font_description(pc);
        lb->_priv->size = pango_font_description_get_size(pfd);

        /* Set our own attribute list */ 
        gtk_label_set_attributes(GTK_LABEL(lb->_priv->label), lb->_priv->attributes);
        return (GtkWidget *)lb;
    }
}
