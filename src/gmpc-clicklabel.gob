requires 2.0.0

%headertop{
#include <gtk/gtk.h>
%}


class Gmpc:ClickLabel from Gtk:Event:Box
{
	private GtkLabel *label = {NULL};
	private gchar *text = {NULL} destroywith g_free;
	init(self)
	{
		g_signal_connect(G_OBJECT(self), "enter-notify-event",G_CALLBACK(self_focus_in_event), NULL);	
		g_signal_connect(G_OBJECT(self), "leave-notify-event", G_CALLBACK(self_focus_out_event), NULL);	
		g_signal_connect(G_OBJECT(self), "button-release-event", G_CALLBACK(self_button_release), NULL);	
	}
	private
	void button_release(self,GdkEventButton *event, gpointer data)
	{
		self_clicked(self,NULL);
	}
	private
	gboolean focus_in_event(self, GdkEventFocus *event, gpointer data)
	{
		/* do this more efficient? */
		gchar *markup = g_markup_printf_escaped("<b>%s</b>", self->_priv->text);
		gtk_label_set_markup(self->_priv->label,markup);
		g_free(markup);
		gdk_window_set_cursor(GTK_WIDGET(self)->window, gdk_cursor_new(GDK_HAND1));
		return TRUE;
	}
	private
	gboolean focus_out_event(self, GdkEventFocus *event, gpointer data)
	{
		gchar *markup = g_markup_printf_escaped("%s", self->_priv->text);
		gtk_label_set_markup(self->_priv->label,markup); 
		g_free(markup);
		gdk_window_set_cursor(GTK_WIDGET(self)->window,NULL); 
		return TRUE;
	}
	signal last NONE (POINTER)
	void
	clicked (self, gpointer data)
	{

	}
	
	public
	GtkWidget *new(gchar *value (check null))
	{
		Self *lb = GET_NEW;
		lb->_priv->text = g_strdup(value);
		lb->_priv->label = gtk_label_new(value);
		gtk_event_box_set_visible_window(GTK_EVENT_BOX(lb), FALSE);	
		gtk_container_add(GTK_CONTAINER(lb),lb->_priv->label);
		gtk_label_set_ellipsize(GTK_LABEL(lb->_priv->label), PANGO_ELLIPSIZE_END);
		return lb;
	}

}

