/* Gnome Music Player Client (GMPC)
 * Copyright (C) 2004-2011 Qball Cow <qball@gmpclient.org>
 * Project homepage: http://gmpclient.org/
 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

requires 2.0.0

%ht{
#include <config.h>
#include <gtk/gtk.h>
#include <libmpd/libmpd.h>
#include <libmpd/libmpd-internal.h>
#include "gmpc-mpddata-model.h"
#include "gmpc-mpddata-model-private.h"
%}




class Gmpc:MpdData:Model:Sort from Gmpc:MpdData:Model
		(interface Gtk:Tree:Drag:Source)
		(interface Gtk:Tree:Drag:Dest)
{
		public gchar *playlist = {NULL} destroywith g_free;

	property STRING playlist 
		(nick = "playlist",
		blurb = "The current playlist name",
		default_value = NULL, 
		export,
		link);


		interface Gtk:Tree:Drag:Source
		private 
		gboolean row_draggable (Gtk:Tree:Drag:Source *drag_source, Gtk:Tree:Path *path)
		{
			if(mpd_server_check_version(connection, 0,13,0))
			{
				return TRUE;
			}
			return FALSE;
		}

		interface Gtk:Tree:Drag:Source
			private 
		gboolean drag_data_get (Gtk:Tree:Drag:Source *drag_source, Gtk:Tree:Path *path, Gtk:Selection:Data *selection_data)
		{
			return FALSE;
		}
		interface Gtk:Tree:Drag:Source
			private 
		gboolean drag_data_delete (Gtk:Tree:Drag:Source *drag_source, Gtk:Tree:Path *path) 
		{
			return TRUE;
		}

		interface Gtk:Tree:Drag:Dest
		private gboolean drag_data_received 
				(Gtk:Tree:Drag:Dest *drag_dest, 
				 Gtk:Tree:Path *dest,
				 Gtk:Selection:Data *selection_data) 
		{
			GtkTreePath *path=NULL;
			GtkTreeModel *model=NULL;
			gint *ind = NULL, *ind2 = NULL;
            printf("Got drop\n");
			if(dest == NULL || !gtk_tree_get_row_drag_data(selection_data, &model, &path))
			{
				return FALSE;
			}
			if(GMPC_MPDDATA_MODEL(model)->num_rows < 2)
			{
				gtk_tree_path_free(path);
				return FALSE;
			}
			ind = gtk_tree_path_get_indices(dest);
			ind2 = gtk_tree_path_get_indices(path);
			if(ind && ind2 && GMPC_MPDDATA_MODEL_SORT(model)->playlist)
			{
				MpdData *data = NULL;
				int original = ind2[0];
				int destination = ind[0];
				/*		if(destination >0 && ind[1] != '\0') destination--; */
				if(destination > original) destination--;
				mpd_database_playlist_move(connection, GMPC_MPDDATA_MODEL_SORT(model)->playlist,original,destination);
				data = mpd_database_get_playlist_content(connection, GMPC_MPDDATA_MODEL_SORT(model)->playlist); 
				gmpc_mpddata_model_set_mpd_data(GMPC_MPDDATA_MODEL(model), data);		
			}
			gtk_tree_path_free(path);
			return TRUE;
		}

		interface Gtk:Tree:Drag:Dest
		private gboolean row_drop_possible 
					(Gtk:Tree:Drag:Dest *drag_dest,
					 Gtk:Tree:Path 		*dest,
					 Gtk:Selection:Data *selection_data)
		{
			return TRUE;
		}



		public
		Gmpc:MpdData:Model:Sort *new (void)
		{
			return GET_NEW;
		}
}
