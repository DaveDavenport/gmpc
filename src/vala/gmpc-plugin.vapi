/* gmpc-plugin.vapi generated by valac, do not modify. */

[CCode (cprefix = "Gmpc", lower_case_cprefix = "gmpc_")]
namespace Gmpc {
	[CCode (cprefix = "GmpcPlugin", lower_case_cprefix = "gmpc_plugin_")]
	namespace Plugin {
		[CCode (cheader_filename = "gmpc-plugin.h")]
		public abstract class Base : GLib.Object {
			public int id;
			public string path;
			public int plugin_type;
			public weak string translation_domain;
			public virtual bool get_enabled ();
			public abstract unowned string get_name ();
			public abstract unowned int[] get_version ();
			public virtual void save_yourself ();
			public virtual void set_enabled (bool state);
		}
		[CCode (cheader_filename = "gmpc-plugin.h")]
		public interface BrowserIface : Gmpc.Plugin.Base {
			public abstract void browser_add (Gtk.Widget category_tree);
			public virtual int browser_add_go_menu (Gtk.Menu menu);
			public virtual int browser_option_menu (Gtk.Menu menu);
			public abstract void browser_selected (Gtk.Widget container);
			public abstract void browser_unselected (Gtk.Widget container);
		}
		[CCode (cheader_filename = "gmpc-plugin.h")]
		public interface MetaDataIface : Gmpc.Plugin.Base {
			public abstract void get_data (MPD.Song song, Gmpc.MetaData.Type type, Gmpc.Plugin.MetaDataCallback callback);
			public abstract int get_priority ();
			public abstract void set_priority (int priority);
		}
		[CCode (cheader_filename = "gmpc-plugin.h")]
		public interface PreferencesIface : Gmpc.Plugin.Base {
			public abstract void preferences_pane_construct (Gtk.Container container);
			public abstract void preferences_pane_destroy (Gtk.Container container);
		}
		[CCode (cheader_filename = "gmpc-plugin.h")]
		public interface SongListIface : Gmpc.Plugin.Base {
			public abstract int song_list (Gtk.Widget tree, Gtk.Menu menu);
		}
		[CCode (cheader_filename = "gmpc-plugin.h")]
		public interface ToolMenuIface : Gmpc.Plugin.Base {
			public abstract int tool_menu_integration (Gtk.Menu menu);
		}
		[CCode (cheader_filename = "gmpc-plugin.h")]
		public delegate void MetaDataCallback (GLib.List<Gmpc.MetaData.Item> list);
	}
}
